<?php

namespace Database\Factories;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Instructions>
 */
class InstructionsFactory extends Factory
{
    public const MARKDOWN = [
        <<<EOT
# Students manual

## Dashboard
Here you can see recent exercises and some statisticts in one place

## Generate Exercises
Here you can generate some exercises from list provided by teachers

## Assigned Exercises
Here you can see exercises you generated and didnt solve yet, by clicking on exercise you can see it and if you wish you can solve it

## Solved Exercises
Here you can see your solved exercises in one place
EOT,
        <<<EOT
# Príručka pre študentov

## Dashboard
Tu môžete vidieť nedávne cvičenia a niektoré štatistiky na jednom mieste.

## Generovať cvičenia
Tu môžete generovať cvičenia zo zoznamu poskytnutého učiteľmi.

## Priradené cvičenia
Tu môžete vidieť cvičenia, ktoré ste vygenerovali a ešte ich neriešili. Kliknutím na cvičenie ho môžete zobraziť a v prípade potreby ho vyriešiť.

## Vyriešené cvičenia
Tu môžete vidieť vaše vyriešené cvičenia na jednom mieste.
EOT,
        <<<EOT
# Teachers manual

## Dashboard
Here you can see recent changes and some statisticts in one place

## Add Latex file
Here you can create new exercises lists from latex files

## Exercises list
Here you'll find your generated exercises lists

## Students
Here you can find all the students

## Student exercises
Here you can find exercises generated by student, if its solved you can edit the amount of points student got.
EOT,
<<<EOT
# Príručka pre učiteľov

## Dashboard
Tu môžete vidieť nedávne zmeny a niektoré štatistiky na jednom mieste.

## Pridať súbor LaTeX
Tu môžete vytvoriť nové zoznamy cvičení zo súborov LaTeX.

## Zoznam cvičení
Tu nájdete vaše vygenerované zoznamy cvičení.

## Študenti
Tu nájdete všetkých študentov.

## Cvičenia študentov
Tu nájdete cvičenia, ktoré vygeneroval študent. Ak je cvičenie vyriešené, môžete upraviť počet bodov, ktoré študent dostal.
EOT];
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => $this->faker->sentence(3),
            'description' => $this->faker->sentence(8),
            'markdown' => $this->faker->randomElement(self::MARKDOWN),
            'for_user_type' => $this->faker->randomElement(['student', 'teacher', 'all']),
            'created_by' => User::where('role', '=', 'admin')->inRandomOrder()->first()->id
        ];
    }

    public function studentSlovak(): static
    {
        return $this->state(fn (array $attributes) => [
            'name' => 'Príručka pre študentov',
            'description' => 'Zakladna príručka pre študentov',
            'markdown' => self::MARKDOWN[1],
            'for_user_type' => 'student',
        ]);
    }

    public function studentEnglish(): static
    {
        return $this->state(fn (array $attributes) => [
            'name' => 'Students manual',
            'description' => 'Basic manual for students',
            'markdown' => self::MARKDOWN[0],
            'for_user_type' => 'student',
        ]);
    }

    public function teacherSlovak(): static
    {
        return $this->state(fn (array $attributes) => [
            'name' => 'Príručka pre učiteľov',
            'description' => 'Zakladna príručka pre učiteľov',
            'markdown' => self::MARKDOWN[3],
            'for_user_type' => 'teacher',
        ]);
    }

    public function teacherEnglish(): static
    {
        return $this->state(fn (array $attributes) => [
            'name' => 'Teachers manual',
            'description' => 'Basic manual for teachers',
            'markdown' => self::MARKDOWN[2],
            'for_user_type' => 'teacher',
        ]);
    }
}
