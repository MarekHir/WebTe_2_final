FROM php:8.2-fpm

# Arguments defined in docker-compose.yml
ARG user
ARG uid

WORKDIR ~

COPY requirements.txt .

# Use the default production configuration
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"
COPY ./php/uploads.ini $PHP_INI_DIR/conf.d/uploads.ini

# Install additional dependencies
RUN apt update  \
    && apt install -y \
        git \
        curl \
        libpng-dev \
        libonig-dev \
        libxml2-dev \
        zip \
        unzip \
        libpq-dev \
        build-essential zlib1g-dev  \
        libncurses5-dev  \
        libgdbm-dev  \
        libnss3-dev  \
        libssl-dev  \
        libreadline-dev  \
        libffi-dev  \
        libsqlite3-dev  \
        wget  \
        libbz2-dev \
        python3 \
        python3-pip \
        python3.11-venv

ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

RUN pip3 install -r requirements.txt

# Clear cache
RUN apt clean && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql  \
    && docker-php-ext-install pdo_pgsql mbstring exif pcntl bcmath gd

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create system user to run Composer and Artisan Commands
RUN if [$uid != 0] ; then useradd -G www-data,root -u $uid -d /home/$user $user ; fi
RUN if [$uid != 0] ; then mkdir -p /home/$user/.composer && \
    chown -R $user:$user /home/$user ; fi

# Set working directory
WORKDIR /var/www

USER $user

